Round Robin CPU Scheduling Simulator

This is a primarily a Node.Js Command Line aplication. It requires npm to run, along with Python 3 for the comparisson component.
To install simply run `npm install` in the project directory.
It is a set of utilities used to test and compare static vs dynamic round robin scheduling implementations.

Simulator:
To run the program enter `node ./round-robin.js` in the command line.
Default behavior is processing input.txt in the project directory, erroring out if not present.
input.txt should be in the format `arrival-time-seconds burst-time-seconds` with any number of lines.
Program cannot handle incorrect input formats.

Usage:
`npm run robin -- <args>`

Options:
-f File in arrival-time burst-time format, default: '' uses 500 random samples with max burst time of 160s and max arrival gap of 256s
-o Overhead value. Integer in milliseconds, default: 0
-q Quantum. Integer in milliseconds, default: 50
-r Result file overwrites existing, default result.csv

Test script `npm test` runs program 24 times, using Overhead 0, 5, 10, 15, 20, 25 and Quantum 50, 100, 250, 500
from input.txt. Saves results in files named 'o${current_overhead}q${current_quantum}.csv'.
test command also saves the total, wait, and turnaround times of each run into bulkTestResults.csv
All solution values are in milliseconds in the individual tables, and in seconds for Bulk Results.
Code is commented where necessary.

Generators:
This package includes data generators that currently take no arguments.
`npm run generate-txt`
produces `generated.txt`, 5000 reasonably generated values readable by the run robin utility. Includes arrival and burst time in seconds.
`npm run generate-json`
produces `generated.json`, 5000 reasonably generated values readable by the python competitive comparisson. Includes arrival and burst time in seconds.
`npm run generate-kmc`
produces `generated.csv`, 5000 reasonably generated values ready to be used to generate clusters with K-means algorithms. Includes burst, burst/quantum, and burst/remainingTotalBurst. Uses a 500ms quantum. All in ms.

Comparator:
A simple program that matches performance between static and dynamic RR implementations. Current values are calculated using K-means Clustering over a set generated by `generate-kmc` using a quantum of 18ms. Arguments will be implemented soon.
Usage:
`python3 quantum-vs.py`
Comparisons are made using separately produced sets of randomized tasks to avoid overfitting and approximate practical performance.
